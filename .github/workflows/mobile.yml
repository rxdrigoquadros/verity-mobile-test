# .github/workflows/mobile-tests.yml
name: Mobile Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  APPIUM_VERSION: '2.11.3'

jobs:
  test-android:
    name: Android Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Create test structure
        run: |
          mkdir -p test/specs config
          
          # Create basic test file
          cat > test/specs/app.basic.spec.js << 'EOF'
          describe('Android App Basic Tests', () => {
              it('should launch app successfully', async () => {
                  await driver.pause(3000);
                  const context = await driver.getContext();
                  console.log('Current context:', context);
                  expect(context).toBeDefined();
              });
          
              it('should check app package', async () => {
                  const pkg = await driver.getCurrentPackage();
                  console.log('Current package:', pkg);
                  expect(pkg).toBeDefined();
              });
          });
          EOF

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install
          
      - name: Setup Appium
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium --version
          appium driver install uiautomator2@2.45.1
          appium driver list --installed

      - name: Download Android app
        run: |
          mkdir -p apps
          wget -q https://github.com/webdriverio/native-demo-app/releases/download/v1.0.8/Android-NativeDemoApp-0.4.0.apk -P apps/
          ls -la apps/

      - name: Create Android test runner
        run: |
          cat > run-android-tests.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "========================================="
          echo "📱 Android Test Runner"
          echo "========================================="
          
          # Start Appium
          echo "🚀 Starting Appium server..."
          appium --address 127.0.0.1 --port 4723 --relaxed-security > appium.log 2>&1 &
          APPIUM_PID=$!
          
          # Wait for Appium
          echo "⏳ Waiting for Appium..."
          for i in {1..30}; do
            if curl -s http://127.0.0.1:4723/status | grep -q '"ready":true'; then
              echo "✅ Appium is ready!"
              break
            fi
            sleep 2
          done
          
          # Check devices
          echo "📱 Connected devices:"
          adb devices
          
          # Run tests
          echo "🧪 Running tests..."
          npm run test:android || TEST_RESULT=$?
          
          # Cleanup
          kill $APPIUM_PID 2>/dev/null || true
          
          echo "✅ Test execution completed"
          exit ${TEST_RESULT:-0}
          EOF
          
          chmod +x run-android-tests.sh

      - name: Run Android Tests with Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          avd-name: test_emulator
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          disable-spellchecker: true
          script: ./run-android-tests.sh

      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "allure-results" ]; then
            npx allure-commandline generate allure-results --clean -o allure-report || true
          else
            mkdir -p allure-report
            echo "<html><body><h1>No test results</h1></body></html>" > allure-report/index.html
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-android-${{ github.run_number }}
          path: |
            allure-report/
            screenshots/
            appium.log
          retention-days: 30
          if-no-files-found: warn

  test-ios:
    name: iOS Tests
    runs-on: macos-13
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create test structure
        run: |
          mkdir -p test/specs config
          
          # Create basic test file
          cat > test/specs/app.basic.spec.js << 'EOF'
          describe('iOS App Basic Tests', () => {
              it('should launch app successfully', async () => {
                  await driver.pause(3000);
                  const context = await driver.getContext();
                  console.log('Current context:', context);
                  expect(context).toBeDefined();
              });
          
              it('should check app state', async () => {
                  try {
                      const state = await driver.execute('mobile: queryAppState', { 
                          bundleId: 'com.wdiodemoapp' 
                      });
                      console.log('App state:', state);
                      expect(state).toBeDefined();
                  } catch (error) {
                      console.log('Could not get app state:', error.message);
                  }
              });
          });
          EOF

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Setup Appium
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium --version
          appium driver install xcuitest@4.35.0
          appium driver list --installed

      - name: Download iOS app
        run: |
          mkdir -p apps
          wget -q https://github.com/webdriverio/native-demo-app/releases/download/v1.0.8/iOS-Simulator-NativeDemoApp-0.4.0.app.zip -P apps/
          unzip -q -o apps/iOS-Simulator-NativeDemoApp-0.4.0.app.zip -d apps/
          ls -la apps/

      - name: Setup iOS Simulator
        run: |
          echo "📱 Setting up iOS Simulator..."
          
          # Get runtime
          RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}')
          echo "Using runtime: $RUNTIME"
          
          # Create simulator
          xcrun simctl delete "iPhone 14 Test" 2>/dev/null || true
          DEVICE_ID=$(xcrun simctl create "iPhone 14 Test" "iPhone 14" "$RUNTIME")
          echo "Device ID: $DEVICE_ID"
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
          
          # Boot simulator
          xcrun simctl boot "$DEVICE_ID"
          xcrun simctl bootstatus "$DEVICE_ID"

      - name: Run iOS Tests
        run: |
          echo "📱 Starting iOS tests..."
          
          # Start Appium
          appium --address 127.0.0.1 --port 4723 --relaxed-security > appium.log 2>&1 &
          APPIUM_PID=$!
          
          # Wait for Appium
          echo "⏳ Waiting for Appium..."
          MAX_ATTEMPTS=30
          for i in $(seq 1 $MAX_ATTEMPTS); do
            if curl -s http://127.0.0.1:4723/status | grep -q '"ready":true'; then
              echo "✅ Appium is ready!"
              break
            fi
            echo "   Attempt $i/$MAX_ATTEMPTS..."
            sleep 2
          done
          
          # Show simulator status
          echo "📱 Simulators:"
          xcrun simctl list devices | grep Booted
          
          # Run tests
          echo "🧪 Running tests..."
          npm run test:ios || TEST_RESULT=$?
          
          # Cleanup
          kill $APPIUM_PID 2>/dev/null || true
          
          exit ${TEST_RESULT:-0}

      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "allure-results" ]; then
            npx allure-commandline generate allure-results --clean -o allure-report || true
          else
            mkdir -p allure-report
            echo "<html><body><h1>No test results</h1></body></html>" > allure-report/index.html
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ios-${{ github.run_number }}
          path: |
            allure-report/
            screenshots/
            appium.log
          retention-days: 30
          if-no-files-found: warn

  deploy-report:
    name: Deploy Report
    needs: [test-android, test-ios]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: test-results-*
          path: results/

      - name: Prepare deployment
        run: |
          mkdir -p public
          
          # Copy reports if exist
          find results -name "*.html" -o -name "*.css" -o -name "*.js" | xargs -I {} cp {} public/ 2>/dev/null || true
          
          # Create index if needed
          if [ ! -f "public/index.html" ]; then
            echo "<html><body><h1>Test Reports</h1></body></html>" > public/index.html
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy
        uses: actions/deploy-pages@v4