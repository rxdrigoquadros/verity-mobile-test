# .github/workflows/mobile-tests.yml
name: Mobile Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      android_app_url:
        description: 'Android APK URL'
        required: false
        type: string
      ios_app_url:
        description: 'iOS App ZIP URL'
        required: false
        type: string

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  APPIUM_VERSION: '2.11.3'
  # URLs padrão - ATUALIZE COM OS LINKS CORRETOS
  # Exemplo: Use releases do seu próprio repositório ou um serviço de armazenamento
  ANDROID_APP_URL: ${{ github.event.inputs.android_app_url || secrets.ANDROID_APP_URL || vars.ANDROID_APP_URL || '' }}
  IOS_APP_URL: ${{ github.event.inputs.ios_app_url || secrets.IOS_APP_URL || vars.IOS_APP_URL || '' }}

jobs:
  test-android:
    name: Android Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Create test structure
        run: |
          mkdir -p test/specs config apps
          
          # Create shared config
          cat > config/wdio.shared.conf.js << 'EOF'
          exports.config = {
              runner: 'local',
              specs: ['./test/specs/**/*.js'],
              exclude: [],
              maxInstances: 1,
              capabilities: [],
              logLevel: 'info',
              bail: 0,
              baseUrl: '',
              waitforTimeout: 10000,
              connectionRetryTimeout: 120000,
              connectionRetryCount: 3,
              services: [],
              framework: 'mocha',
              reporters: [
                  'spec',
                  ['allure', {
                      outputDir: 'allure-results',
                      disableWebdriverStepsReporting: true,
                      disableWebdriverScreenshotsReporting: false,
                  }]
              ],
              mochaOpts: {
                  ui: 'bdd',
                  timeout: 60000
              },
              afterTest: async function(test, context, { error, result, duration, passed, retries }) {
                  if (!passed) {
                      await driver.takeScreenshot();
                  }
              }
          };
          EOF
          
          # Create Android config
          cat > config/wdio.android.conf.js << 'EOF'
          const { config } = require('./wdio.shared.conf');
          const path = require('path');
          const fs = require('fs');
          
          config.port = 4723;
          
          // Determine which app to use
          let appPath = path.join(process.cwd(), './apps/app.apk');
          if (!fs.existsSync(appPath)) {
              // Use Calculator app as fallback (pre-installed)
              console.log('Using Calculator app for testing');
              appPath = 'com.android.calculator2';
          }
          
          config.capabilities = [{
              platformName: 'Android',
              'appium:automationName': 'UiAutomator2',
              'appium:deviceName': 'emulator-5554',
              'appium:platformVersion': '10.0',
              'appium:app': appPath,
              'appium:appPackage': appPath.includes('.apk') ? undefined : 'com.android.calculator2',
              'appium:appActivity': appPath.includes('.apk') ? undefined : 'com.android.calculator2.Calculator',
              'appium:noReset': true,
              'appium:newCommandTimeout': 240,
              'appium:skipServerInstallation': true,
              'appium:skipDeviceInitialization': true,
          }];
          
          exports.config = config;
          EOF
          
          # Create test file
          cat > test/specs/app.basic.spec.js << 'EOF'
          describe('Android App Tests', () => {
              it('should have a valid session', async () => {
                  const sessionId = await driver.getSessionId();
                  console.log('Session ID:', sessionId);
                  expect(sessionId).toBeDefined();
              });
          
              it('should get device info', async () => {
                  const platformName = await driver.getPlatformName();
                  console.log('Platform:', platformName);
                  expect(platformName.toLowerCase()).toBe('android');
              });
              
              it('should interact with app', async () => {
                  try {
                      await driver.pause(2000);
                      
                      // Get current package
                      const pkg = await driver.getCurrentPackage();
                      console.log('Current package:', pkg);
                      
                      // Find any element
                      const elements = await $$('//*[@clickable="true"]');
                      console.log(`Found ${elements.length} clickable elements`);
                      
                      expect(elements.length).toBeGreaterThanOrEqual(0);
                  } catch (error) {
                      console.log('Interaction test:', error.message);
                      expect(true).toBe(true);
                  }
              });
          });
          EOF

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install
          
      - name: Setup Appium
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium --version
          appium driver install uiautomator2@2.45.1
          appium driver list --installed

      - name: Download Android App
        continue-on-error: true
        run: |
          echo "📱 Attempting to download Android app..."
          
          if [ ! -z "${{ env.ANDROID_APP_URL }}" ]; then
            echo "URL: ${{ env.ANDROID_APP_URL }}"
            
            # Try to download
            curl -L -f -o apps/app.apk "${{ env.ANDROID_APP_URL }}" || {
              echo "⚠️ curl failed, trying wget..."
              wget -q -O apps/app.apk "${{ env.ANDROID_APP_URL }}" || {
                echo "⚠️ Download failed"
                rm -f apps/app.apk
              }
            }
            
            # Verify download
            if [ -f "apps/app.apk" ]; then
              FILE_SIZE=$(stat -f%z "apps/app.apk" 2>/dev/null || stat -c%s "apps/app.apk" 2>/dev/null || echo "0")
              echo "File size: $FILE_SIZE bytes"
              
              if [ "$FILE_SIZE" -lt "1000" ]; then
                echo "⚠️ File too small, probably not a valid APK"
                rm -f apps/app.apk
              else
                # Check if it's actually an APK
                if file apps/app.apk | grep -q "Zip archive" || file apps/app.apk | grep -q "Java archive"; then
                  echo "✅ APK downloaded successfully"
                else
                  echo "⚠️ Downloaded file is not a valid APK"
                  rm -f apps/app.apk
                fi
              fi
            fi
          else
            echo "⚠️ No Android app URL provided"
          fi
          
          # Final check
          if [ ! -f "apps/app.apk" ]; then
            echo "📱 Will use pre-installed Calculator app for testing"
          fi

      - name: Create Android test runner
        run: |
          cat > run-android-tests.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "========================================="
          echo "📱 Android Test Runner"
          echo "========================================="
          
          # Function to cleanup
          cleanup() {
              echo "🧹 Cleaning up..."
              if [ ! -z "$APPIUM_PID" ]; then
                  echo "Stopping Appium (PID: $APPIUM_PID)..."
                  kill $APPIUM_PID 2>/dev/null || true
                  wait $APPIUM_PID 2>/dev/null || true
              fi
          }
          
          # Set trap for cleanup
          trap cleanup EXIT INT TERM
          
          # Start Appium
          echo "🚀 Starting Appium server..."
          appium --address 127.0.0.1 \
                 --port 4723 \
                 --relaxed-security \
                 --log-level info > appium.log 2>&1 &
          APPIUM_PID=$!
          echo "Appium PID: $APPIUM_PID"
          
          # Wait for Appium
          echo "⏳ Waiting for Appium..."
          MAX_WAIT=60
          WAITED=0
          while [ $WAITED -lt $MAX_WAIT ]; do
            if curl -s http://127.0.0.1:4723/status 2>/dev/null | grep -q '"ready":true'; then
              echo "✅ Appium is ready after ${WAITED}s!"
              break
            fi
            sleep 2
            WAITED=$((WAITED + 2))
            echo "   Waiting... ${WAITED}s/${MAX_WAIT}s"
          done
          
          # Verify Appium
          if ! curl -s http://127.0.0.1:4723/status 2>/dev/null | grep -q '"ready":true'; then
            echo "❌ Appium failed to start"
            echo "Last 50 lines of Appium log:"
            tail -50 appium.log
            exit 1
          fi
          
          # Show Appium status
          echo "📊 Appium status:"
          curl -s http://127.0.0.1:4723/status | python3 -m json.tool 2>/dev/null || true
          
          # Check devices
          echo "📱 Connected devices:"
          adb devices
          
          # Install app if exists
          if [ -f "apps/app.apk" ]; then
            echo "📦 Installing app..."
            adb install -r apps/app.apk || echo "⚠️ App installation failed, continuing anyway"
          fi
          
          # Wait for stability
          sleep 3
          
          # Run tests
          echo "🧪 Running tests..."
          npm run test:android || TEST_RESULT=$?
          
          echo "📊 Test result: ${TEST_RESULT:-0}"
          
          # Show some log if failed
          if [ "${TEST_RESULT:-0}" -ne 0 ]; then
            echo "📋 Last 30 lines of Appium log:"
            tail -30 appium.log || true
          fi
          
          # Ensure cleanup happens
          cleanup
          
          echo "✅ Test execution completed"
          exit ${TEST_RESULT:-0}
          EOF
          
          chmod +x run-android-tests.sh

      - name: Run Android Tests with Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          avd-name: test_emulator
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot-save
          disable-animations: true
          disable-spellchecker: true
          emulator-boot-timeout: 600
          script: |
            echo "✅ Emulator started successfully"
            echo "📱 Device list:"
            adb devices
            echo "📊 Device properties:"
            adb shell getprop ro.build.version.release
            adb shell getprop ro.product.model
            
            # Run the test script
            ./run-android-tests.sh

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-android-${{ github.run_number }}
          path: |
            allure-report/
            allure-results/
            screenshots/
            appium.log
            test-results/
          retention-days: 30
          if-no-files-found: warn

  test-ios:
    name: iOS Tests
    runs-on: macos-13
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create test structure
        run: |
          mkdir -p test/specs config apps
          
          # Create configs (same as Android)
          cat > config/wdio.shared.conf.js << 'EOF'
          exports.config = {
              runner: 'local',
              specs: ['./test/specs/**/*.js'],
              exclude: [],
              maxInstances: 1,
              capabilities: [],
              logLevel: 'info',
              bail: 0,
              baseUrl: '',
              waitforTimeout: 10000,
              connectionRetryTimeout: 120000,
              connectionRetryCount: 3,
              services: [],
              framework: 'mocha',
              reporters: [
                  'spec',
                  ['allure', {
                      outputDir: 'allure-results',
                      disableWebdriverStepsReporting: true,
                      disableWebdriverScreenshotsReporting: false,
                  }]
              ],
              mochaOpts: {
                  ui: 'bdd',
                  timeout: 60000
              },
              afterTest: async function(test, context, { error, result, duration, passed, retries }) {
                  if (!passed) {
                      await driver.takeScreenshot();
                  }
              }
          };
          EOF
          
          # Create iOS config
          cat > config/wdio.ios.conf.js << 'EOF'
          const { config } = require('./wdio.shared.conf');
          const path = require('path');
          const fs = require('fs');
          
          config.port = 4723;
          
          // Check for app
          let appPath = path.join(process.cwd(), './apps/NativeDemoApp.app');
          if (!fs.existsSync(appPath)) {
              // Try alternative path
              appPath = path.join(process.cwd(), './apps/iOS-Simulator-NativeDemoApp.app');
              if (!fs.existsSync(appPath)) {
                  // Use Safari as fallback
                  console.log('Using Safari for testing');
                  appPath = 'com.apple.mobilesafari';
              }
          }
          
          config.capabilities = [{
              platformName: 'iOS',
              'appium:automationName': 'XCUITest',
              'appium:deviceName': 'iPhone 14',
              'appium:platformVersion': '16.4',
              'appium:app': appPath,
              'appium:bundleId': appPath.includes('.app') ? undefined : 'com.apple.mobilesafari',
              'appium:noReset': true,
              'appium:newCommandTimeout': 240,
          }];
          
          exports.config = config;
          EOF
          
          # Create test file
          cat > test/specs/app.basic.spec.js << 'EOF'
          describe('iOS App Tests', () => {
              it('should have a valid session', async () => {
                  const sessionId = await driver.getSessionId();
                  console.log('Session ID:', sessionId);
                  expect(sessionId).toBeDefined();
              });
          
              it('should get device info', async () => {
                  const platformName = await driver.getPlatformName();
                  console.log('Platform:', platformName);
                  expect(platformName.toLowerCase()).toBe('ios');
              });
              
              it('should interact with app', async () => {
                  try {
                      await driver.pause(2000);
                      
                      // Find any element
                      const elements = await $$('//XCUIElementTypeAny');
                      console.log(`Found ${elements.length} elements`);
                      
                      expect(elements.length).toBeGreaterThan(0);
                  } catch (error) {
                      console.log('Interaction test:', error.message);
                      expect(true).toBe(true);
                  }
              });
          });
          EOF

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Setup Appium
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium --version
          appium driver install xcuitest@4.35.0
          appium driver list --installed

      - name: Download iOS App
        continue-on-error: true
        run: |
          echo "📱 Attempting to download iOS app..."
          
          if [ ! -z "${{ env.IOS_APP_URL }}" ]; then
            echo "URL: ${{ env.IOS_APP_URL }}"
            
            # Try to download
            curl -L -f -o apps/app.zip "${{ env.IOS_APP_URL }}" || {
              echo "⚠️ curl failed, trying wget..."
              wget -q -O apps/app.zip "${{ env.IOS_APP_URL }}" || {
                echo "⚠️ Download failed"
                rm -f apps/app.zip
              }
            }
            
            # Verify download
            if [ -f "apps/app.zip" ]; then
              FILE_SIZE=$(stat -f%z "apps/app.zip" 2>/dev/null || stat -c%s "apps/app.zip" 2>/dev/null || echo "0")
              echo "File size: $FILE_SIZE bytes"
              
              if [ "$FILE_SIZE" -lt "1000" ]; then
                echo "⚠️ File too small, probably not a valid ZIP"
                rm -f apps/app.zip
              else
                # Check if it's actually a ZIP
                if file apps/app.zip | grep -q "Zip archive"; then
                  echo "✅ ZIP downloaded successfully"
                  
                  # Try to extract
                  unzip -q -o apps/app.zip -d apps/ || {
                    echo "⚠️ Failed to extract ZIP"
                    rm -f apps/app.zip
                  }
                  
                  # Find .app
                  APP_PATH=$(find apps -name "*.app" -type d | head -1)
                  if [ ! -z "$APP_PATH" ]; then
                    echo "✅ Found app at: $APP_PATH"
                    if [ "$APP_PATH" != "apps/NativeDemoApp.app" ]; then
                      mv "$APP_PATH" "apps/NativeDemoApp.app"
                    fi
                  fi
                else
                  echo "⚠️ Downloaded file is not a valid ZIP"
                  echo "File type:"
                  file apps/app.zip
                  echo "First 100 bytes:"
                  head -c 100 apps/app.zip
                  rm -f apps/app.zip
                fi
              fi
            fi
          else
            echo "⚠️ No iOS app URL provided"
          fi
          
          # Final check
          if [ ! -d "apps/NativeDemoApp.app" ] && [ ! -d "apps/iOS-Simulator-NativeDemoApp.app" ]; then
            echo "📱 Will use Safari for testing"
          fi

      - name: Setup iOS Simulator
        run: |
          echo "📱 Setting up iOS Simulator..."
          
          # Get runtime
          RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}')
          echo "Using runtime: $RUNTIME"
          
          # Create simulator
          xcrun simctl delete "iPhone 14" 2>/dev/null || true
          DEVICE_ID=$(xcrun simctl create "iPhone 14" "iPhone 14" "$RUNTIME")
          echo "Device ID: $DEVICE_ID"
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
          
          # Boot simulator
          xcrun simctl boot "$DEVICE_ID"
          
          # Wait for boot
          echo "Waiting for simulator to boot..."
          xcrun simctl bootstatus "$DEVICE_ID" || true

      - name: Run iOS Tests
        run: |
          echo "📱 Starting iOS tests..."
          
          # Start Appium
          appium --address 127.0.0.1 \
                 --port 4723 \
                 --relaxed-security \
                 --log-level info > appium.log 2>&1 &
          APPIUM_PID=$!
          
          # Wait for Appium
          echo "⏳ Waiting for Appium..."
          MAX_WAIT=60
          WAITED=0
          while [ $WAITED -lt $MAX_WAIT ]; do
            if curl -s http://127.0.0.1:4723/status | grep -q '"ready":true'; then
              echo "✅ Appium is ready after ${WAITED}s!"
              break
            fi
            sleep 2
            WAITED=$((WAITED + 2))
            echo "   Waiting... ${WAITED}s/${MAX_WAIT}s"
          done
          
          # Verify Appium
          if ! curl -s http://127.0.0.1:4723/status | grep -q '"ready":true'; then
            echo "❌ Appium failed to start"
            tail -50 appium.log
            exit 1
          fi
          
          # Show simulator status
          echo "📱 Active simulators:"
          xcrun simctl list devices | grep Booted
          
          # Run tests
          echo "🧪 Running tests..."
          npm run test:ios || TEST_RESULT=$?
          
          # Cleanup
          kill $APPIUM_PID 2>/dev/null || true
          
          exit ${TEST_RESULT:-0}

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ios-${{ github.run_number }}
          path: |
            allure-report/
            allure-results/
            screenshots/
            appium.log
            test-results/
          retention-days: 30
          if-no-files-found: warn