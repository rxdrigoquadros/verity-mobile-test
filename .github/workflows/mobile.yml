# .github/workflows/mobile-tests.yml
name: Mobile Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      android_app_url:
        description: 'Android APK URL'
        required: false
        type: string
      ios_app_url:
        description: 'iOS App ZIP URL'
        required: false
        type: string

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  APPIUM_VERSION: '2.11.3'
  # URLs dos apps - Configure via Secrets ou Variables
  ANDROID_APP_URL: ${{ github.event.inputs.android_app_url || secrets.ANDROID_APP_URL || vars.ANDROID_APP_URL || '' }}
  IOS_APP_URL: ${{ github.event.inputs.ios_app_url || secrets.IOS_APP_URL || vars.IOS_APP_URL || '' }}

jobs:
  test-android:
    name: Android Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Check and prepare test structure
        run: |
          echo "üìÅ Checking existing test structure..."
          
          # Create necessary directories if they don't exist
          mkdir -p apps config
          
          # Check which directory has the tests
          if [ -d "test/spec" ] && [ "$(ls -A test/spec/*.js 2>/dev/null)" ]; then
            echo "‚úÖ Found tests in test/spec/"
            ls -la test/spec/
            TEST_DIR="test/spec"
          elif [ -d "test/specs" ] && [ "$(ls -A test/specs/*.js 2>/dev/null)" ]; then
            echo "‚úÖ Found tests in test/specs/"
            ls -la test/specs/
            TEST_DIR="test/specs"
          else
            echo "‚ö†Ô∏è No tests found, creating basic test..."
            mkdir -p test/specs
            TEST_DIR="test/specs"
            
            # Create a basic test only if no tests exist
            cat > test/specs/00.basic.spec.js << 'EOF'
          describe('Basic Android Tests', () => {
              it('should create a session', async () => {
                  const sessionId = await driver.getSessionId();
                  console.log('Session ID:', sessionId);
                  expect(sessionId).toBeDefined();
              });
              
              it('should verify platform', async () => {
                  const platform = await driver.getPlatformName();
                  console.log('Platform:', platform);
                  expect(platform.toLowerCase()).toBe('android');
              });
          });
          EOF
          fi
          
          echo "TEST_DIR=$TEST_DIR" >> $GITHUB_ENV
          
          # Check if configs exist, if not create them
          if [ ! -f "config/wdio.shared.conf.js" ]; then
            echo "üìù Creating shared config..."
            cat > config/wdio.shared.conf.js << EOF
          exports.config = {
              runner: 'local',
              specs: ['./${TEST_DIR}/**/*.js'],
              exclude: [],
              maxInstances: 1,
              capabilities: [],
              logLevel: 'info',
              bail: 0,
              baseUrl: '',
              waitforTimeout: 10000,
              connectionRetryTimeout: 120000,
              connectionRetryCount: 3,
              services: [],
              framework: 'mocha',
              reporters: [
                  'spec',
                  ['allure', {
                      outputDir: 'allure-results',
                      disableWebdriverStepsReporting: true,
                      disableWebdriverScreenshotsReporting: false,
                  }]
              ],
              mochaOpts: {
                  ui: 'bdd',
                  timeout: 60000
              },
              afterTest: async function(test, context, { error, result, duration, passed, retries }) {
                  if (!passed) {
                      await driver.takeScreenshot();
                  }
              }
          };
          EOF
          fi
          
          if [ ! -f "config/wdio.android.conf.js" ]; then
            echo "üìù Creating Android config..."
            cat > config/wdio.android.conf.js << EOF
          const { config } = require('./wdio.shared.conf');
          const path = require('path');
          const fs = require('fs');
          
          config.port = 4723;
          config.specs = ['${TEST_DIR}/**/*.js'];
          
          // Check if we have a downloaded app
          let appPath = path.join(process.cwd(), './apps/app.apk');
          let capabilities = {};
          
          if (fs.existsSync(appPath)) {
              console.log('Using downloaded app:', appPath);
              capabilities = {
                  platformName: 'Android',
                  'appium:automationName': 'UiAutomator2',
                  'appium:deviceName': 'emulator-5554',
                  'appium:platformVersion': '10.0',
                  'appium:app': appPath,
                  'appium:noReset': true,
                  'appium:newCommandTimeout': 240,
              };
          } else {
              console.log('No app found, using Calculator for testing');
              capabilities = {
                  platformName: 'Android',
                  'appium:automationName': 'UiAutomator2',
                  'appium:deviceName': 'emulator-5554',
                  'appium:platformVersion': '10.0',
                  'appium:appPackage': 'com.android.calculator2',
                  'appium:appActivity': 'com.android.calculator2.Calculator',
                  'appium:noReset': true,
                  'appium:newCommandTimeout': 240,
              };
          }
          
          config.capabilities = [capabilities];
          exports.config = config;
          EOF
          fi
          
          # Show final test structure
          echo "üìÅ Final test structure:"
          echo "Test directory: $TEST_DIR"
          ls -la $TEST_DIR/ || echo "No test files found"
          echo "Config files:"
          ls -la config/

      - name: Install dependencies
        run: |
          # Don't remove existing node_modules if package-lock exists
          if [ ! -f "package-lock.json" ]; then
            rm -rf node_modules
          fi
          npm install
          
      - name: Setup Appium
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium --version
          appium driver install uiautomator2@2.45.1
          appium driver list --installed

      - name: Download Android App
        continue-on-error: true
        run: |
          if [ ! -z "${{ env.ANDROID_APP_URL }}" ]; then
            echo "üì± Downloading Android app from: ${{ env.ANDROID_APP_URL }}"
            
            curl -L -f -o apps/app.apk "${{ env.ANDROID_APP_URL }}" || {
              echo "‚ö†Ô∏è Failed to download APK"
              rm -f apps/app.apk
            }
            
            # Verify the download
            if [ -f "apps/app.apk" ]; then
              FILE_SIZE=$(stat -c%s "apps/app.apk" 2>/dev/null || stat -f%z "apps/app.apk" 2>/dev/null || echo "0")
              echo "Downloaded file size: $FILE_SIZE bytes"
              
              if [ "$FILE_SIZE" -gt "1000" ]; then
                echo "‚úÖ APK downloaded successfully"
              else
                echo "‚ö†Ô∏è Downloaded file is too small, removing..."
                rm -f apps/app.apk
              fi
            fi
          else
            echo "‚ö†Ô∏è No Android app URL configured"
            echo "üì± Tests will run with Calculator app"
          fi

      - name: Create Android test runner
        run: |
          cat > run-android-tests.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "========================================="
          echo "üì± Android Test Runner"
          echo "========================================="
          
          # Show test files
          echo "üìã Test files to run:"
          find ${TEST_DIR:-test/specs} -name "*.js" -type f 2>/dev/null | sort || echo "No test files found"
          
          # Function to cleanup
          cleanup() {
              echo "üßπ Cleaning up..."
              if [ ! -z "$APPIUM_PID" ]; then
                  kill -TERM $APPIUM_PID 2>/dev/null || true
                  sleep 2
                  kill -KILL $APPIUM_PID 2>/dev/null || true
              fi
          }
          
          # Set trap for cleanup
          trap cleanup EXIT INT TERM
          
          # Kill any existing Appium processes
          pkill -f appium || true
          
          # Start Appium
          echo "üöÄ Starting Appium server..."
          appium --address 127.0.0.1 \
                 --port 4723 \
                 --relaxed-security \
                 --log-level info > appium.log 2>&1 &
          APPIUM_PID=$!
          echo "Appium PID: $APPIUM_PID"
          
          # Wait for Appium to be ready
          echo "‚è≥ Waiting for Appium to start..."
          TIMEOUT=60
          ELAPSED=0
          while [ $ELAPSED -lt $TIMEOUT ]; do
            if curl -s http://127.0.0.1:4723/status | grep -q '"ready":true'; then
              echo "‚úÖ Appium is ready!"
              break
            fi
            sleep 2
            ELAPSED=$((ELAPSED + 2))
            echo "   Waiting... ${ELAPSED}s/${TIMEOUT}s"
          done
          
          # Verify Appium is running
          if ! curl -s http://127.0.0.1:4723/status | grep -q '"ready":true'; then
            echo "‚ùå Appium failed to start"
            echo "Appium log:"
            cat appium.log
            exit 1
          fi
          
          # Show Appium status
          echo "üìä Appium server status:"
          curl -s http://127.0.0.1:4723/status | python3 -m json.tool || true
          
          # Check connected devices
          echo "üì± Connected Android devices:"
          adb devices
          
          # Install app if exists
          if [ -f "apps/app.apk" ]; then
            echo "üì¶ Installing app on emulator..."
            adb -s emulator-5554 install -r apps/app.apk || echo "‚ö†Ô∏è App installation failed"
          fi
          
          # Give emulator time to stabilize
          sleep 3
          
          # Run tests
          echo "üß™ Starting test execution..."
          npm run test:android || TEST_EXIT=$?
          
          # Show results
          if [ "${TEST_EXIT:-0}" -eq 0 ]; then
            echo "‚úÖ All tests passed!"
          else
            echo "‚ùå Tests failed with exit code: ${TEST_EXIT:-1}"
            echo "üìã Appium log (last 50 lines):"
            tail -50 appium.log || true
          fi
          
          exit ${TEST_EXIT:-0}
          EOF
          
          chmod +x run-android-tests.sh
          echo "‚úÖ Test runner script created"

      - name: Run Android Tests with Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          avd-name: test_emulator
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot-save
          disable-animations: true
          disable-spellchecker: true
          emulator-boot-timeout: 600
          script: |
            echo "‚úÖ Emulator ready!"
            echo "üì± Checking ADB connection:"
            adb devices
            echo "üìä Device info:"
            adb shell getprop ro.build.version.release || true
            
            # Export TEST_DIR for the script
            export TEST_DIR="${TEST_DIR:-test/specs}"
            
            # Execute tests
            ./run-android-tests.sh

      - name: Generate Allure Report
        if: always()
        run: |
          echo "üìä Generating test report..."
          if [ -d "allure-results" ] && [ "$(ls -A allure-results 2>/dev/null)" ]; then
            npx allure-commandline generate allure-results --clean -o allure-report || echo "Failed to generate Allure report"
          else
            echo "No test results found for report generation"
            mkdir -p allure-report
            echo "<html><body><h1>No test results available</h1></body></html>" > allure-report/index.html
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-artifacts-${{ github.run_number }}
          path: |
            allure-report/
            allure-results/
            screenshots/
            appium.log
            test-results/
          retention-days: 30
          if-no-files-found: warn

  test-ios:
    name: iOS Tests
    runs-on: macos-13
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check and prepare test structure
        run: |
          echo "üìÅ Checking existing test structure..."
          
          # Create necessary directories
          mkdir -p apps config
          
          # Check test directory
          if [ -d "test/spec" ] && [ "$(ls -A test/spec/*.js 2>/dev/null)" ]; then
            echo "‚úÖ Found tests in test/spec/"
            ls -la test/spec/
            TEST_DIR="test/spec"
          elif [ -d "test/specs" ] && [ "$(ls -A test/specs/*.js 2>/dev/null)" ]; then
            echo "‚úÖ Found tests in test/specs/"
            ls -la test/specs/
            TEST_DIR="test/specs"
          else
            echo "‚ö†Ô∏è No tests found, creating basic test..."
            mkdir -p test/specs
            TEST_DIR="test/specs"
            
            cat > test/specs/00.basic.spec.js << 'EOF'
          describe('Basic iOS Tests', () => {
              it('should create a session', async () => {
                  const sessionId = await driver.getSessionId();
                  console.log('Session ID:', sessionId);
                  expect(sessionId).toBeDefined();
              });
              
              it('should verify platform', async () => {
                  const platform = await driver.getPlatformName();
                  console.log('Platform:', platform);
                  expect(platform.toLowerCase()).toBe('ios');
              });
          });
          EOF
          fi
          
          echo "TEST_DIR=$TEST_DIR" >> $GITHUB_ENV
          
          # Create configs if they don't exist
          if [ ! -f "config/wdio.shared.conf.js" ]; then
            cat > config/wdio.shared.conf.js << EOF
          exports.config = {
              runner: 'local',
              specs: ['./${TEST_DIR}/**/*.js'],
              exclude: [],
              maxInstances: 1,
              capabilities: [],
              logLevel: 'info',
              bail: 0,
              baseUrl: '',
              waitforTimeout: 10000,
              connectionRetryTimeout: 120000,
              connectionRetryCount: 3,
              services: [],
              framework: 'mocha',
              reporters: [
                  'spec',
                  ['allure', {
                      outputDir: 'allure-results',
                      disableWebdriverStepsReporting: true,
                      disableWebdriverScreenshotsReporting: false,
                  }]
              ],
              mochaOpts: {
                  ui: 'bdd',
                  timeout: 60000
              },
              afterTest: async function(test, context, { error, result, duration, passed, retries }) {
                  if (!passed) {
                      await driver.takeScreenshot();
                  }
              }
          };
          EOF
          fi
          
          if [ ! -f "config/wdio.ios.conf.js" ]; then
            cat > config/wdio.ios.conf.js << EOF
          const { config } = require('./wdio.shared.conf');
          const path = require('path');
          const fs = require('fs');
          
          config.port = 4723;
          config.specs = ['${TEST_DIR}/**/*.js'];
          
          // Determine app path
          let appPath = path.join(process.cwd(), './apps/NativeDemoApp.app');
          let capabilities = {};
          
          if (fs.existsSync(appPath)) {
              console.log('Using app:', appPath);
              capabilities = {
                  platformName: 'iOS',
                  'appium:automationName': 'XCUITest',
                  'appium:deviceName': 'iPhone 14',
                  'appium:platformVersion': '16.4',
                  'appium:app': appPath,
                  'appium:noReset': true,
                  'appium:newCommandTimeout': 240,
              };
          } else {
              console.log('No app found, using Safari for testing');
              capabilities = {
                  platformName: 'iOS',
                  'appium:automationName': 'XCUITest',
                  'appium:deviceName': 'iPhone 14',
                  'appium:platformVersion': '16.4',
                  'appium:bundleId': 'com.apple.mobilesafari',
                  'appium:noReset': true,
                  'appium:newCommandTimeout': 240,
              };
          }
          
          config.capabilities = [capabilities];
          exports.config = config;
          EOF
          fi

      - name: Install dependencies
        run: |
          if [ ! -f "package-lock.json" ]; then
            rm -rf node_modules
          fi
          npm install

      - name: Setup Appium
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium --version
          appium driver install xcuitest@4.35.0
          appium driver list --installed

      - name: Download iOS App
        continue-on-error: true
        run: |
          if [ ! -z "${{ env.IOS_APP_URL }}" ]; then
            echo "üì± Downloading iOS app from: ${{ env.IOS_APP_URL }}"
            
            curl -L -f -o apps/app.zip "${{ env.IOS_APP_URL }}" || {
              echo "‚ö†Ô∏è Failed to download app"
              rm -f apps/app.zip
            }
            
            if [ -f "apps/app.zip" ]; then
              FILE_SIZE=$(stat -f%z "apps/app.zip" 2>/dev/null || echo "0")
              echo "Downloaded file size: $FILE_SIZE bytes"
              
              if [ "$FILE_SIZE" -gt "1000" ]; then
                unzip -q -o apps/app.zip -d apps/ || echo "Failed to extract"
                APP_PATH=$(find apps -name "*.app" -type d | head -1)
                if [ ! -z "$APP_PATH" ]; then
                  mv "$APP_PATH" "apps/NativeDemoApp.app" 2>/dev/null || true
                  echo "‚úÖ iOS app ready"
                fi
              fi
            fi
          else
            echo "‚ö†Ô∏è No iOS app URL configured"
            echo "üì± Tests will run with Safari"
          fi

      - name: Setup iOS Simulator
        run: |
          echo "üì± Setting up iOS Simulator..."
          
          RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}')
          echo "Runtime: $RUNTIME"
          
          xcrun simctl delete "iPhone 14" 2>/dev/null || true
          DEVICE_ID=$(xcrun simctl create "iPhone 14" "iPhone 14" "$RUNTIME")
          echo "Device ID: $DEVICE_ID"
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
          
          xcrun simctl boot "$DEVICE_ID"
          xcrun simctl bootstatus "$DEVICE_ID" || true

      - name: Run iOS Tests
        run: |
          echo "üì± Starting iOS tests..."
          echo "üìã Test files:"
          find ${TEST_DIR:-test/specs} -name "*.js" -type f | sort || echo "No tests found"
          
          # Start Appium
          appium --address 127.0.0.1 --port 4723 --relaxed-security > appium.log 2>&1 &
          APPIUM_PID=$!
          
          # Wait for Appium
          echo "‚è≥ Waiting for Appium..."
          for i in {1..30}; do
            if curl -s http://127.0.0.1:4723/status | grep -q '"ready":true'; then
              echo "‚úÖ Appium ready!"
              break
            fi
            sleep 2
          done
          
          # Run tests
          npm run test:ios || TEST_EXIT=$?
          
          # Cleanup
          kill $APPIUM_PID 2>/dev/null || true
          
          exit ${TEST_EXIT:-0}

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-test-artifacts-${{ github.run_number }}
          path: |
            allure-report/
            allure-results/
            screenshots/
            appium.log
            test-results/
          retention-days: 30
          if-no-files-found: warn