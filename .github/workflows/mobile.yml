# .github/workflows/mobile-tests.yml
name: Mobile Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'  # Atualizado para Java 17
  APPIUM_VERSION: '2.11.3'

jobs:
  test-android:
    name: Android Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Install dependencies
        run: |
          # Clean install
          rm -rf node_modules package-lock.json
          npm install
          
      - name: Setup Appium with compatible drivers
        run: |
          # Install specific Appium version
          npm install -g appium@${{ env.APPIUM_VERSION }}
          
          # Verify Appium version
          appium --version
          
          # Install compatible driver versions
          appium driver install uiautomator2@2.45.1
          
          # List installed drivers
          appium driver list --installed

      - name: Download Android app
        run: |
          mkdir -p apps
          wget -q https://github.com/webdriverio/native-demo-app/releases/download/v1.0.8/android.wdio.native.app.v1.0.8.apk -P apps/

      - name: Setup and Run Android Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29  # Usando API 29 que é mais estável
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          avd-name: test_emulator
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          disable-spellchecker: true
          script: |
            echo "Starting Appium server..."
            appium --allow-insecure chromedriver_autodownload --relaxed-security > appium.log 2>&1 &
            APPIUM_PID=$!
            
            # Wait for Appium to start
            timeout=60
            while [ $timeout -gt 0 ]; do
              if curl -s http://127.0.0.1:4723/status 2>/dev/null | grep -q '"ready":true'; then
                echo "✅ Appium is ready!"
                break
              fi
              echo "⏳ Waiting for Appium... ($timeout seconds left)"
              sleep 2
              timeout=$((timeout - 2))
            done
            
            if [ $timeout -eq 0 ]; then
              echo "❌ Appium failed to start"
              cat appium.log
              exit 1
            fi
            
            # Check if emulator is ready
            adb wait-for-device
            adb devices
            
            echo "📱 Running Android tests..."
            npm run test:android || echo "Tests completed with status $?"
            
            # Kill Appium
            kill $APPIUM_PID || true

      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "allure-results" ]; then
            npx allure-commandline generate allure-results --clean -o allure-report
          else
            echo "No test results found, creating placeholder report"
            mkdir -p allure-report
            cat > allure-report/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>Test Report - No Results</title>
                <style>
                    body { font-family: Arial, sans-serif; padding: 40px; }
                    .warning { color: #ff9800; }
                </style>
            </head>
            <body>
                <h1>📱 Android Test Report</h1>
                <p class="warning">No test results were generated. Check the workflow logs for details.</p>
            </body>
            </html>
            EOF
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-android-${{ github.run_number }}
          path: |
            allure-report/
            screenshots/
            appium.log
            test-results/
          retention-days: 30
          if-no-files-found: warn

  test-ios:
    name: iOS Tests
    runs-on: macos-13  # Especificando versão do macOS
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          # Clean install
          rm -rf node_modules package-lock.json
          npm install

      - name: Setup Appium with compatible drivers
        run: |
          # Install specific Appium version
          npm install -g appium@${{ env.APPIUM_VERSION }}
          
          # Verify Appium version
          appium --version
          
          # Install compatible driver version
          appium driver install xcuitest@4.35.0
          
          # List installed drivers
          appium driver list --installed

      - name: Download iOS app
        run: |
          mkdir -p apps
          wget -q https://github.com/webdriverio/native-demo-app/releases/download/v1.0.8/ios.simulator.wdio.native.app.v1.0.8.zip -P apps/
          unzip -q -o apps/ios.simulator.wdio.native.app.v1.0.8.zip -d apps/

      - name: Setup iOS Simulator
        run: |
          # List available runtimes and devices
          echo "Available runtimes:"
          xcrun simctl list runtimes
          
          echo "Available devices:"
          xcrun simctl list devices available
          
          # Create or use existing simulator
          DEVICE_NAME="iPhone 14"
          RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}')
          
          echo "Using runtime: $RUNTIME"
          
          # Try to create, ignore if exists
          xcrun simctl create "$DEVICE_NAME" "com.apple.CoreSimulator.SimDeviceType.iPhone-14" "$RUNTIME" 2>/dev/null || true
          
          # Get device ID
          DEVICE_ID=$(xcrun simctl list devices | grep "$DEVICE_NAME" | grep -v "unavailable" | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}' | head -1)
          
          if [ -z "$DEVICE_ID" ]; then
            echo "Creating new simulator..."
            DEVICE_ID=$(xcrun simctl create "Test iPhone" "iPhone 14" | tail -1)
          fi
          
          echo "Device ID: $DEVICE_ID"
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
          
          # Boot simulator
          xcrun simctl boot "$DEVICE_ID" || echo "Simulator already booted"
          
          # Wait for boot
          xcrun simctl bootstatus "$DEVICE_ID" || true
          
          # Open Simulator app (headless in CI)
          open -a Simulator --args -CurrentDeviceUDID "$DEVICE_ID" || true

      - name: Start Appium and run tests
        run: |
          echo "Starting Appium server..."
          appium --allow-insecure chromedriver_autodownload --relaxed-security > appium.log 2>&1 &
          APPIUM_PID=$!
          
          # Wait for Appium to start
          timeout=60
          while [ $timeout -gt 0 ]; do
            if curl -s http://127.0.0.1:4723/status 2>/dev/null | grep -q '"ready":true'; then
              echo "✅ Appium is ready!"
              break
            fi
            echo "⏳ Waiting for Appium... ($timeout seconds left)"
            sleep 2
            timeout=$((timeout - 2))
          done
          
          if [ $timeout -eq 0 ]; then
            echo "❌ Appium failed to start"
            cat appium.log
            exit 1
          fi
          
          echo "📱 Running iOS tests..."
          npm run test:ios || echo "Tests completed with status $?"
          
          # Kill Appium
          kill $APPIUM_PID || true

      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "allure-results" ]; then
            npx allure-commandline generate allure-results --clean -o allure-report
          else
            echo "No test results found, creating placeholder report"
            mkdir -p allure-report
            cat > allure-report/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>Test Report - No Results</title>
                <style>
                    body { font-family: Arial, sans-serif; padding: 40px; }
                    .warning { color: #ff9800; }
                </style>
            </head>
            <body>
                <h1>📱 iOS Test Report</h1>
                <p class="warning">No test results were generated. Check the workflow logs for details.</p>
            </body>
            </html>
            EOF
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ios-${{ github.run_number }}
          path: |
            allure-report/
            screenshots/
            appium.log
            test-results/
          retention-days: 30
          if-no-files-found: warn

  deploy-report:
    name: Deploy Report to GitHub Pages
    needs: [test-android, test-ios]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: test-results-android-${{ github.run_number }}
          path: android-results/

      - name: Download iOS results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: test-results-ios-${{ github.run_number }}
          path: ios-results/

      - name: Prepare deployment
        run: |
          mkdir -p public
          
          # Merge reports if they exist
          if [ -d "android-results/allure-report" ]; then
            echo "Copying Android report..."
            cp -r android-results/allure-report/* public/ 2>/dev/null || true
          fi
          
          if [ -d "ios-results/allure-report" ]; then
            echo "Copying iOS report..."
            cp -r ios-results/allure-report/* public/ 2>/dev/null || true
          fi
          
          # Create a summary page if no reports
          if [ ! -f "public/index.html" ]; then
            echo "Creating summary page..."
            cat > public/index.html << 'EOF'
            <!DOCTYPE html>
            <html lang="pt-BR">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Mobile Test Reports</title>
                <style>
                    * { margin: 0; padding: 0; box-sizing: border-box; }
                    body { 
                        font-family: system-ui, -apple-system, sans-serif;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        min-height: 100vh;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        padding: 20px;
                    }
                    .container {
                        max-width: 800px;
                        width: 100%;
                        background: white;
                        border-radius: 20px;
                        padding: 40px;
                        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                    }
                    h1 { 
                        color: #333;
                        margin-bottom: 30px;
                        display: flex;
                        align-items: center;
                        gap: 10px;
                    }
                    .badge {
                        display: inline-block;
                        padding: 5px 15px;
                        border-radius: 20px;
                        font-size: 14px;
                        font-weight: 500;
                    }
                    .badge.success { background: #d4edda; color: #155724; }
                    .badge.warning { background: #fff3cd; color: #856404; }
                    .info-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                        gap: 20px;
                        margin-top: 30px;
                    }
                    .info-card {
                        padding: 20px;
                        background: #f8f9fa;
                        border-radius: 10px;
                        border-left: 4px solid #667eea;
                    }
                    .info-card h3 {
                        color: #495057;
                        font-size: 14px;
                        margin-bottom: 8px;
                        text-transform: uppercase;
                        letter-spacing: 0.5px;
                    }
                    .info-card p {
                        color: #212529;
                        font-size: 18px;
                        font-weight: 600;
                    }
                    .timestamp {
                        text-align: center;
                        margin-top: 40px;
                        color: #6c757d;
                        font-size: 14px;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>
                        📱 Mobile Test Reports
                        <span class="badge warning">No Results</span>
                    </h1>
                    
                    <p style="color: #6c757d; margin-bottom: 30px;">
                        The test reports will be available after successful test execution.
                    </p>
                    
                    <div class="info-grid">
                        <div class="info-card">
                            <h3>Branch</h3>
                            <p>main</p>
                        </div>
                        <div class="info-card">
                            <h3>Run Number</h3>
                            <p>#${{ github.run_number }}</p>
                        </div>
                        <div class="info-card">
                            <h3>Status</h3>
                            <p>⏳ Processing</p>
                        </div>
                    </div>
                    
                    <p class="timestamp">
                        Generated at: <script>document.write(new Date().toLocaleString());</script>
                    </p>
                </div>
            </body>
            </html>
            EOF
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4