# .github/workflows/mobile-tests.yml
name: Mobile Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '11'

jobs:
  test-android:
    name: Android Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Install dependencies
        run: |
          npm ci
          
      - name: Setup Appium
        run: |
          npm install -g appium@^2.11.0
          appium driver list --installed || true
          appium driver update uiautomator2 || appium driver install uiautomator2

      - name: Download Android app
        run: |
          mkdir -p apps
          if [ ! -f "apps/Android-NativeDemoApp-0.4.0.apk" ]; then
            wget https://github.com/webdriverio/native-demo-app/releases/download/v1.0.8/Android-NativeDemoApp-0.4.0.apk -P apps/
          fi

      - name: Setup Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          profile: Nexus 6
          avd-name: test_emulator
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: true
          script: |
            # Start Appium server
            appium --log-timestamp --log-no-colors > appium.log 2>&1 &
            sleep 10
            
            # Check if Appium is running
            curl -s http://127.0.0.1:4723/status || echo "Appium not responding"
            
            # Run tests
            npm run test:android || echo "Tests completed with status $?"

      - name: Generate Allure Report
        if: always()
        run: |
          npx allure-commandline generate allure-results --clean -o allure-report || echo "Report generation failed"

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-android-${{ github.run_number }}
          path: |
            allure-report/
            screenshots/
            appium.log
          retention-days: 30
          if-no-files-found: warn

  test-ios:
    name: iOS Tests
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci

      - name: Setup Appium
        run: |
          npm install -g appium@^2.11.0
          appium driver list --installed || true
          appium driver update xcuitest || appium driver install xcuitest

      - name: Download iOS app
        run: |
          mkdir -p apps
          if [ ! -f "apps/iOS-Simulator-NativeDemoApp-0.4.0.app.zip" ]; then
            wget https://github.com/webdriverio/native-demo-app/releases/download/v1.0.8/iOS-Simulator-NativeDemoApp-0.4.0.app.zip -P apps/
            unzip apps/iOS-Simulator-NativeDemoApp-0.4.0.app.zip -d apps/
          fi

      - name: Setup iOS Simulator
        run: |
          # List available devices
          xcrun simctl list devices
          
          # Create simulator if not exists
          xcrun simctl create "iPhone 14 Test" "iPhone 14" iOS16.4 || echo "Simulator already exists"
          
          # Boot simulator
          DEVICE_ID=$(xcrun simctl list devices | grep "iPhone 14 Test" | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}' | head -1)
          xcrun simctl boot $DEVICE_ID || echo "Simulator already booted"
          
          # Wait for simulator
          xcrun simctl bootstatus $DEVICE_ID || true

      - name: Start Appium and run tests
        run: |
          # Start Appium server
          appium --log-timestamp --log-no-colors > appium.log 2>&1 &
          sleep 10
          
          # Check if Appium is running
          curl -s http://127.0.0.1:4723/status || echo "Appium not responding"
          
          # Run tests
          npm run test:ios || echo "Tests completed with status $?"

      - name: Generate Allure Report
        if: always()
        run: |
          npx allure-commandline generate allure-results --clean -o allure-report || echo "Report generation failed"

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ios-${{ github.run_number }}
          path: |
            allure-report/
            screenshots/
            appium.log
          retention-days: 30
          if-no-files-found: warn

  deploy-report:
    name: Deploy Report to GitHub Pages
    needs: [test-android, test-ios]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: test-results-android-${{ github.run_number }}
          path: android-results/

      - name: Download iOS results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: test-results-ios-${{ github.run_number }}
          path: ios-results/

      - name: Prepare deployment
        run: |
          mkdir -p public
          
          # Copy Android report if exists
          if [ -d "android-results/allure-report" ]; then
            cp -r android-results/allure-report/* public/ 2>/dev/null || true
          fi
          
          # Copy iOS report if exists (merge if Android exists)
          if [ -d "ios-results/allure-report" ]; then
            cp -r ios-results/allure-report/* public/ 2>/dev/null || true
          fi
          
          # Create index.html if no report exists
          if [ ! -f "public/index.html" ]; then
            cat > public/index.html << 'EOF'
            <!DOCTYPE html>
            <html lang="pt-BR">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Mobile Test Reports</title>
                <style>
                    * {
                        margin: 0;
                        padding: 0;
                        box-sizing: border-box;
                    }
                    body { 
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        min-height: 100vh;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        padding: 20px;
                    }
                    .container {
                        max-width: 600px;
                        width: 100%;
                        background: white;
                        border-radius: 20px;
                        padding: 40px;
                        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                    }
                    h1 { 
                        color: #333;
                        margin-bottom: 10px;
                        font-size: 28px;
                    }
                    .subtitle {
                        color: #666;
                        margin-bottom: 30px;
                        font-size: 14px;
                    }
                    .status-card {
                        padding: 20px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        border-radius: 12px;
                        color: white;
                        margin-bottom: 20px;
                    }
                    .status-card h3 {
                        margin-bottom: 10px;
                        font-size: 18px;
                    }
                    .status-card p {
                        opacity: 0.9;
                        font-size: 14px;
                        line-height: 1.5;
                    }
                    .info-grid {
                        display: grid;
                        grid-template-columns: repeat(2, 1fr);
                        gap: 15px;
                        margin-top: 20px;
                    }
                    .info-item {
                        padding: 15px;
                        background: #f8f9fa;
                        border-radius: 8px;
                        border-left: 3px solid #667eea;
                    }
                    .info-item strong {
                        display: block;
                        color: #333;
                        margin-bottom: 5px;
                        font-size: 12px;
                        text-transform: uppercase;
                        letter-spacing: 0.5px;
                    }
                    .info-item span {
                        color: #666;
                        font-size: 14px;
                    }
                    .timestamp {
                        text-align: center;
                        margin-top: 30px;
                        color: #999;
                        font-size: 12px;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>📱 Mobile Automation</h1>
                    <p class="subtitle">Test Reports Dashboard</p>
                    
                    <div class="status-card">
                        <h3>⏳ Relatório em Processamento</h3>
                        <p>O relatório de testes será disponibilizado após a conclusão da execução dos testes automatizados.</p>
                    </div>
                    
                    <div class="info-grid">
                        <div class="info-item">
                            <strong>Branch</strong>
                            <span>${GITHUB_REF_NAME:-main}</span>
                        </div>
                        <div class="info-item">
                            <strong>Run Number</strong>
                            <span>#${GITHUB_RUN_NUMBER:-0}</span>
                        </div>
                        <div class="info-item">
                            <strong>Commit</strong>
                            <span>${GITHUB_SHA:0:7}</span>
                        </div>
                        <div class="info-item">
                            <strong>Status</strong>
                            <span>🔄 Processing</span>
                        </div>
                    </div>
                    
                    <p class="timestamp">
                        Última atualização: <script>document.write(new Date().toLocaleString('pt-BR'));</script>
                    </p>
                </div>
            </body>
            </html>
            EOF
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4