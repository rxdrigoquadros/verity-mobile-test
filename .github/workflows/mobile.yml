# .github/workflows/mobile-tests.yml
name: Mobile Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      android_app_url:
        description: 'Android APK URL'
        required: false
        type: string
        default: 'https://github.com/webdriverio/native-demo-app/releases/latest/download/Android-NativeDemoApp.apk'
      ios_app_url:
        description: 'iOS App ZIP URL'
        required: false
        type: string
        default: 'https://github.com/webdriverio/native-demo-app/releases/latest/download/iOS-Simulator-NativeDemoApp.app.zip'

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  APPIUM_VERSION: '2.11.3'
  ANDROID_APP_URL: ${{ github.event.inputs.android_app_url || secrets.ANDROID_APP_URL || vars.ANDROID_APP_URL || 'https://github.com/webdriverio/native-demo-app/releases/latest/download/Android-NativeDemoApp.apk' }}
  IOS_APP_URL: ${{ github.event.inputs.ios_app_url || secrets.IOS_APP_URL || vars.IOS_APP_URL || 'https://github.com/webdriverio/native-demo-app/releases/latest/download/iOS-Simulator-NativeDemoApp.app.zip' }}

jobs:
  test-android:
    name: Android Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Create test data file
        run: |
          mkdir -p test/data
          cat > test/data/testData.json << 'EOF'
          {
            "validUser": {
              "email": "test@example.com",
              "password": "Test1234!"
            },
            "invalidUser": {
              "email": "invalid@example.com",
              "password": "wrong"
            },
            "formData": {
              "name": "Test User",
              "email": "user@test.com",
              "age": "25"
            }
          }
          EOF
          
          echo "✅ Created test data file"

      - name: Create/Update configs
        run: |
          mkdir -p config apps
          
          # Shared config
          cat > config/wdio.shared.conf.js << 'EOF'
          const path = require('path');
          
          exports.config = {
              runner: 'local',
              specs: [
                  path.join(process.cwd(), './test/specs/**/*.js'),
                  path.join(process.cwd(), './test/spec/**/*.js')
              ],
              exclude: [],
              maxInstances: 1,
              capabilities: [],
              logLevel: 'info',
              bail: 0,
              baseUrl: '',
              waitforTimeout: 30000,
              connectionRetryTimeout: 120000,
              connectionRetryCount: 3,
              services: [],
              framework: 'mocha',
              reporters: ['spec'],
              mochaOpts: {
                  ui: 'bdd',
                  timeout: 120000
              }
          };
          EOF
          
          # Android config
          cat > config/wdio.android.conf.js << 'EOF'
          const { config } = require('./wdio.shared.conf');
          const path = require('path');
          const fs = require('fs');
          
          config.port = 4723;
          config.specs = [
              path.join(process.cwd(), './test/specs/**/*.js'),
              path.join(process.cwd(), './test/spec/**/*.js')
          ];
          
          // Use downloaded app
          const appPath = path.join(process.cwd(), './apps/app.apk');
          
          config.capabilities = [{
              platformName: 'Android',
              'appium:automationName': 'UiAutomator2',
              'appium:deviceName': 'emulator-5554',
              'appium:platformVersion': '13.0',
              'appium:app': fs.existsSync(appPath) ? appPath : undefined,
              'appium:appPackage': fs.existsSync(appPath) ? undefined : 'com.wdiodemoapp',
              'appium:appActivity': fs.existsSync(appPath) ? undefined : '.MainActivity',
              'appium:noReset': false,
              'appium:fullReset': false,
              'appium:newCommandTimeout': 240,
              'appium:autoGrantPermissions': true,
              'appium:disableWindowAnimation': true,
              'appium:skipDeviceInitialization': true,
              'appium:skipServerInstallation': true,
              'appium:uiautomator2ServerInstallTimeout': 60000,
              'appium:adbExecTimeout': 60000,
              'appium:androidInstallTimeout': 120000
          }];
          
          exports.config = config;
          EOF

      - name: Install dependencies
        run: |
          npm init -y
          npm install --save-dev \
            @wdio/cli \
            @wdio/local-runner \
            @wdio/mocha-framework \
            @wdio/spec-reporter \
            @wdio/appium-service \
            appium-uiautomator2-driver
          
      - name: Setup Appium
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium driver install uiautomator2@2.45.1
          appium driver list --installed

      - name: Download Android App
        run: |
          echo "📱 Downloading Android app..."
          
          # Try multiple download methods
          curl -L -o apps/app.apk "${{ env.ANDROID_APP_URL }}" || \
          wget -O apps/app.apk "${{ env.ANDROID_APP_URL }}" || \
          curl -L -o apps/app.apk "https://github.com/webdriverio/native-demo-app/releases/latest/download/Android-NativeDemoApp.apk"
          
          # Verify download
          if [ -f "apps/app.apk" ]; then
            FILE_SIZE=$(stat -c%s apps/app.apk 2>/dev/null || stat -f%z apps/app.apk 2>/dev/null || echo "0")
            echo "✅ APK downloaded: ${FILE_SIZE} bytes"
            
            # Verify it's a valid APK
            file apps/app.apk
          else
            echo "❌ Failed to download APK"
          fi

      - name: Create test runner
        run: |
          cat > run-tests.sh << 'EOF'
          #!/bin/bash
          
          echo "📱 Android Test Runner"
          echo "Working directory: $(pwd)"
          
          # Check test files
          echo "Test files found:"
          find test -name "*.spec.js" -type f | head -10
          
          # Check if APK exists
          if [ -f "apps/app.apk" ]; then
            echo "✅ Using downloaded APK"
          else
            echo "⚠️ No APK found"
          fi
          
          # Start Appium
          echo "Starting Appium..."
          appium --address 127.0.0.1 --port 4723 --relaxed-security \
                 --allow-insecure=adb_shell \
                 --log-level info > appium.log 2>&1 &
          APPIUM_PID=$!
          
          # Wait for Appium
          sleep 5
          for i in {1..30}; do
            if curl -s http://127.0.0.1:4723/status | grep -q "ready.*true"; then
              echo "✅ Appium ready!"
              break
            fi
            sleep 2
          done
          
          # Check emulator
          echo "Devices:"
          adb devices
          
          # Install app if exists
          if [ -f "apps/app.apk" ]; then
            echo "Installing app..."
            adb -s emulator-5554 install -r -g apps/app.apk || true
          fi
          
          # Run tests
          echo "Running tests..."
          npx wdio config/wdio.android.conf.js || TEST_EXIT=$?
          
          # Cleanup
          kill $APPIUM_PID 2>/dev/null || true
          
          exit ${TEST_EXIT:-0}
          EOF
          chmod +x run-tests.sh

      - name: Run Android Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          profile: pixel_6
          avd-name: test_device
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          disable-spellchecker: true
          emulator-boot-timeout: 900
          script: |
            # Wait for device
            adb wait-for-device
            adb shell input keyevent 82
            
            # Run tests
            ./run-tests.sh

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results-${{ github.run_number }}
          path: |
            appium.log
            test-results/
            screenshots/
          retention-days: 30

  test-ios:
    name: iOS Tests
    runs-on: macos-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create test data file
        run: |
          mkdir -p test/data
          cat > test/data/testData.json << 'EOF'
          {
            "validUser": {
              "email": "test@example.com",
              "password": "Test1234!"
            },
            "invalidUser": {
              "email": "invalid@example.com",
              "password": "wrong"
            },
            "formData": {
              "name": "Test User",
              "email": "user@test.com",
              "age": "25"
            }
          }
          EOF

      - name: Create configs
        run: |
          mkdir -p config apps
          
          # Shared config
          cat > config/wdio.shared.conf.js << 'EOF'
          const path = require('path');
          
          exports.config = {
              runner: 'local',
              specs: [
                  path.join(process.cwd(), './test/specs/**/*.js'),
                  path.join(process.cwd(), './test/spec/**/*.js')
              ],
              exclude: [],
              maxInstances: 1,
              capabilities: [],
              logLevel: 'info',
              bail: 0,
              baseUrl: '',
              waitforTimeout: 30000,
              connectionRetryTimeout: 120000,
              connectionRetryCount: 3,
              services: [],
              framework: 'mocha',
              reporters: ['spec'],
              mochaOpts: {
                  ui: 'bdd',
                  timeout: 120000
              }
          };
          EOF
          
          # iOS config - with dynamic version
          cat > config/wdio.ios.conf.js << 'EOF'
          const { config } = require('./wdio.shared.conf');
          const path = require('path');
          const fs = require('fs');
          
          config.port = 4723;
          config.specs = [
              path.join(process.cwd(), './test/specs/**/*.js'),
              path.join(process.cwd(), './test/spec/**/*.js')
          ];
          
          const appPath = path.join(process.cwd(), './apps/NativeDemoApp.app');
          
          config.capabilities = [{
              platformName: 'iOS',
              'appium:automationName': 'XCUITest',
              'appium:deviceName': 'iPhone 14',
              'appium:platformVersion': process.env.IOS_VERSION || '17.2',
              'appium:app': fs.existsSync(appPath) ? appPath : undefined,
              'appium:bundleId': fs.existsSync(appPath) ? undefined : 'org.reactjs.native.example.wdiodemoapp',
              'appium:noReset': false,
              'appium:fullReset': false,
              'appium:newCommandTimeout': 240,
              'appium:simulatorStartupTimeout': 120000,
              'appium:wdaLaunchTimeout': 60000,
              'appium:wdaConnectionTimeout': 60000,
              'appium:usePrebuiltWDA': true,
              'appium:useNewWDA': false
          }];
          
          exports.config = config;
          EOF

      - name: Install dependencies
        run: |
          npm init -y
          npm install --save-dev \
            @wdio/cli \
            @wdio/local-runner \
            @wdio/mocha-framework \
            @wdio/spec-reporter \
            @wdio/appium-service \
            appium-xcuitest-driver

      - name: Setup Appium
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium driver install xcuitest
          appium driver list --installed

      - name: Download iOS App
        run: |
          echo "📱 Downloading iOS app..."
          
          # Download
          curl -L -o apps/app.zip "${{ env.IOS_APP_URL }}" || \
          curl -L -o apps/app.zip "https://github.com/webdriverio/native-demo-app/releases/latest/download/iOS-Simulator-NativeDemoApp.app.zip"
          
          # Extract if valid
          if [ -f "apps/app.zip" ]; then
            FILE_SIZE=$(stat -f%z apps/app.zip 2>/dev/null || echo "0")
            if [ "$FILE_SIZE" -gt "10000" ]; then
              unzip -q -o apps/app.zip -d apps/
              APP_PATH=$(find apps -name "*.app" -type d | head -1)
              if [ ! -z "$APP_PATH" ]; then
                mv "$APP_PATH" "apps/NativeDemoApp.app" 2>/dev/null || true
                echo "✅ iOS app ready"
              fi
            fi
          fi

      - name: Setup Simulator
        run: |
          echo "📱 Setting up iOS Simulator..."
          
          # Get available iOS versions
          echo "Available runtimes:"
          xcrun simctl list runtimes
          
          # Get the latest iOS runtime (dynamically)
          RUNTIME=$(xcrun simctl list runtimes | grep "iOS" | tail -1 | awk '{print $NF}')
          IOS_VERSION=$(xcrun simctl list runtimes | grep "iOS" | tail -1 | sed -n 's/.*iOS \([0-9.]*\).*/\1/p')
          
          echo "Using iOS version: $IOS_VERSION"
          echo "IOS_VERSION=$IOS_VERSION" >> $GITHUB_ENV
          
          # Create simulator
          xcrun simctl delete "iPhone 14" 2>/dev/null || true
          DEVICE_ID=$(xcrun simctl create "iPhone 14" "iPhone 14" "$RUNTIME")
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
          
          # Boot simulator
          xcrun simctl boot "$DEVICE_ID"
          xcrun simctl bootstatus "$DEVICE_ID" || true

      - name: Run iOS Tests
        run: |
          echo "📱 Running iOS tests..."
          
          # Start Appium
          appium --address 127.0.0.1 --port 4723 --relaxed-security > appium.log 2>&1 &
          APPIUM_PID=$!
          
          # Wait for Appium
          sleep 5
          for i in {1..30}; do
            if curl -s http://127.0.0.1:4723/status | grep -q "ready.*true"; then
              echo "✅ Appium ready!"
              break
            fi
            sleep 2
          done
          
          # Run tests with dynamic iOS version
          IOS_VERSION=$IOS_VERSION npx wdio config/wdio.ios.conf.js || TEST_EXIT=$?
          
          # Cleanup
          kill $APPIUM_PID 2>/dev/null || true
          
          exit ${TEST_EXIT:-0}

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-test-results-${{ github.run_number }}
          path: |
            appium.log
            test-results/
            screenshots/
          retention-days: 30