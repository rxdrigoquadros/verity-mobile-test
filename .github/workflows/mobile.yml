# .github/workflows/mobile-tests.yml
name: Mobile Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '11'
  APPIUM_VERSION: '2.11.3'  # Versão estável do Appium 2

jobs:
  test-android:
    name: Android Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Install dependencies
        run: |
          # Clean install
          rm -rf node_modules package-lock.json
          npm install
          
      - name: Setup Appium with compatible drivers
        run: |
          # Install specific Appium version
          npm install -g appium@${{ env.APPIUM_VERSION }}
          
          # Verify Appium version
          appium --version
          
          # Install compatible driver versions
          appium driver install uiautomator2@2.45.1
          
          # List installed drivers
          appium driver list --installed

      - name: Download Android app
        run: |
          mkdir -p apps
          wget -q https://github.com/webdriverio/native-demo-app/releases/download/v1.0.8/android.wdio.native.app.v1.0.8.apk -P apps/

      - name: Setup Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          profile: Nexus 6
          avd-name: test_emulator
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: true
          script: |
            # Start Appium server
            appium --allow-insecure chromedriver_autodownload > appium.log 2>&1 &
            
            # Wait for Appium to start
            timeout=30
            while [ $timeout -gt 0 ]; do
              if curl -s http://127.0.0.1:4723/status | grep -q '"ready":true'; then
                echo "Appium is ready!"
                break
              fi
              echo "Waiting for Appium... ($timeout seconds left)"
              sleep 1
              timeout=$((timeout - 1))
            done
            
            # Run tests
            npm run test:android || echo "Tests completed with status $?"

      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "allure-results" ]; then
            npx allure-commandline generate allure-results --clean -o allure-report
          else
            echo "No test results found"
            mkdir -p allure-report
            echo "<html><body><h1>No test results available</h1></body></html>" > allure-report/index.html
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-android-${{ github.run_number }}
          path: |
            allure-report/
            screenshots/
            appium.log
          retention-days: 30
          if-no-files-found: warn

  test-ios:
    name: iOS Tests
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          # Clean install
          rm -rf node_modules package-lock.json
          npm install

      - name: Setup Appium with compatible drivers
        run: |
          # Install specific Appium version
          npm install -g appium@${{ env.APPIUM_VERSION }}
          
          # Verify Appium version
          appium --version
          
          # Install compatible driver version
          appium driver install xcuitest@4.35.0
          
          # List installed drivers
          appium driver list --installed

      - name: Download iOS app
        run: |
          mkdir -p apps
          wget -q https://github.com/webdriverio/native-demo-app/releases/download/v1.0.8/ios.simulator.wdio.native.app.v1.0.8.zip -P apps/
          unzip -q apps/ios.simulator.wdio.native.app.v1.0.8.zip -d apps/

      - name: Setup iOS Simulator
        run: |
          # Get available runtimes
          xcrun simctl list runtimes
          
          # Get available device types
          xcrun simctl list devicetypes
          
          # Create simulator with available runtime
          RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}')
          DEVICE_TYPE="iPhone 14"
          
          echo "Creating simulator with runtime: $RUNTIME"
          xcrun simctl create "Test iPhone" "$DEVICE_TYPE" "$RUNTIME" || echo "Simulator might already exist"
          
          # Get device ID
          DEVICE_ID=$(xcrun simctl list devices | grep "Test iPhone" | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}' | head -1)
          
          if [ -z "$DEVICE_ID" ]; then
            echo "Using first available iPhone simulator"
            DEVICE_ID=$(xcrun simctl list devices | grep iPhone | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}' | head -1)
          fi
          
          echo "Device ID: $DEVICE_ID"
          
          # Boot simulator
          xcrun simctl boot "$DEVICE_ID" || echo "Simulator already booted"
          
          # Wait for boot
          xcrun simctl bootstatus "$DEVICE_ID" || true

      - name: Start Appium and run tests
        run: |
          # Start Appium server
          appium --allow-insecure chromedriver_autodownload > appium.log 2>&1 &
          
          # Wait for Appium to start
          timeout=30
          while [ $timeout -gt 0 ]; do
            if curl -s http://127.0.0.1:4723/status | grep -q '"ready":true'; then
              echo "Appium is ready!"
              break
            fi
            echo "Waiting for Appium... ($timeout seconds left)"
            sleep 1
            timeout=$((timeout - 1))
          done
          
          # Run tests
          npm run test:ios || echo "Tests completed with status $?"

      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "allure-results" ]; then
            npx allure-commandline generate allure-results --clean -o allure-report
          else
            echo "No test results found"
            mkdir -p allure-report
            echo "<html><body><h1>No test results available</h1></body></html>" > allure-report/index.html
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ios-${{ github.run_number }}
          path: |
            allure-report/
            screenshots/
            appium.log
          retention-days: 30
          if-no-files-found: warn

  deploy-report:
    name: Deploy Report to GitHub Pages
    needs: [test-android, test-ios]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: test-results-android-${{ github.run_number }}
          path: android-results/

      - name: Download iOS results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: test-results-ios-${{ github.run_number }}
          path: ios-results/

      - name: Prepare deployment
        run: |
          mkdir -p public
          
          # Copy Android report if exists
          if [ -d "android-results/allure-report" ]; then
            cp -r android-results/allure-report/* public/ 2>/dev/null || true
          fi
          
          # Copy iOS report if exists (merge if Android exists)
          if [ -d "ios-results/allure-report" ]; then
            cp -r ios-results/allure-report/* public/ 2>/dev/null || true
          fi
          
          # Create index.html if no report exists
          if [ ! -f "public/index.html" ]; then
            cat > public/index.html << 'EOF'
            <!DOCTYPE html>
            <html lang="pt-BR">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Mobile Test Reports</title>
                <style>
                    * { margin: 0; padding: 0; box-sizing: border-box; }
                    body { 
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        min-height: 100vh;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        padding: 20px;
                    }
                    .container {
                        max-width: 600px;
                        width: 100%;
                        background: white;
                        border-radius: 20px;
                        padding: 40px;
                        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                    }
                    h1 { color: #333; margin-bottom: 10px; font-size: 28px; }
                    .status { 
                        padding: 20px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        border-radius: 12px;
                        color: white;
                        margin: 20px 0;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>📱 Mobile Test Reports</h1>
                    <div class="status">
                        <h3>Report Status</h3>
                        <p>Test execution completed. Check workflow logs for details.</p>
                    </div>
                </div>
            </body>
            </html>
            EOF
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4