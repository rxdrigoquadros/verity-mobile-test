# .github/workflows/mobile-tests.yml
name: Mobile Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      android_app_url:
        description: 'Android APK URL'
        required: false
        type: string
      ios_app_url:
        description: 'iOS App ZIP URL'
        required: false
        type: string

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  APPIUM_VERSION: '2.11.3'
  ANDROID_APP_URL: ${{ github.event.inputs.android_app_url || secrets.ANDROID_APP_URL || vars.ANDROID_APP_URL || '' }}
  IOS_APP_URL: ${{ github.event.inputs.ios_app_url || secrets.IOS_APP_URL || vars.IOS_APP_URL || '' }}

jobs:
  test-android:
    name: Android Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Verify test structure
        run: |
          echo "üìÅ Current directory structure:"
          pwd
          ls -la
          
          echo "üìÅ Test directory:"
          if [ -d "test/specs" ]; then
            ls -la test/specs/
          elif [ -d "test/spec" ]; then
            ls -la test/spec/
          else
            echo "No test directory found!"
          fi
          
          # Create apps directory
          mkdir -p apps

      - name: Create/Update configs
        run: |
          mkdir -p config
          
          # Create shared config with absolute paths
          cat > config/wdio.shared.conf.js << 'EOF'
          const path = require('path');
          
          exports.config = {
              runner: 'local',
              specs: [
                  path.join(process.cwd(), './test/specs/**/*.js'),
                  path.join(process.cwd(), './test/spec/**/*.js')
              ],
              exclude: [],
              maxInstances: 1,
              capabilities: [],
              logLevel: 'info',
              bail: 0,
              baseUrl: '',
              waitforTimeout: 10000,
              connectionRetryTimeout: 120000,
              connectionRetryCount: 3,
              services: [],
              framework: 'mocha',
              reporters: [
                  'spec',
                  ['allure', {
                      outputDir: 'allure-results',
                      disableWebdriverStepsReporting: true,
                      disableWebdriverScreenshotsReporting: false,
                  }]
              ],
              mochaOpts: {
                  ui: 'bdd',
                  timeout: 60000
              },
              afterTest: async function(test, context, { error, result, duration, passed, retries }) {
                  if (!passed) {
                      try {
                          await driver.takeScreenshot();
                      } catch (e) {
                          console.log('Failed to take screenshot:', e.message);
                      }
                  }
              }
          };
          EOF
          
          # Create Android config
          cat > config/wdio.android.conf.js << 'EOF'
          const { config } = require('./wdio.shared.conf');
          const path = require('path');
          const fs = require('fs');
          
          config.port = 4723;
          
          // Set specs with absolute paths
          config.specs = [
              path.join(process.cwd(), './test/specs/**/*.js'),
              path.join(process.cwd(), './test/spec/**/*.js')
          ];
          
          // Check if we have a downloaded app
          let appPath = path.join(process.cwd(), './apps/app.apk');
          let capabilities = {};
          
          if (fs.existsSync(appPath)) {
              console.log('Using downloaded app:', appPath);
              capabilities = {
                  platformName: 'Android',
                  'appium:automationName': 'UiAutomator2',
                  'appium:deviceName': 'emulator-5554',
                  'appium:platformVersion': '10.0',
                  'appium:app': appPath,
                  'appium:noReset': true,
                  'appium:newCommandTimeout': 240,
                  'appium:autoGrantPermissions': true,
                  'appium:disableWindowAnimation': true,
              };
          } else {
              console.log('No app found, using Calculator for testing');
              capabilities = {
                  platformName: 'Android',
                  'appium:automationName': 'UiAutomator2',
                  'appium:deviceName': 'emulator-5554',
                  'appium:platformVersion': '10.0',
                  'appium:appPackage': 'com.android.calculator2',
                  'appium:appActivity': 'com.android.calculator2.Calculator',
                  'appium:noReset': true,
                  'appium:newCommandTimeout': 240,
                  'appium:autoGrantPermissions': true,
                  'appium:disableWindowAnimation': true,
              };
          }
          
          config.capabilities = [capabilities];
          exports.config = config;
          EOF

      - name: Install dependencies
        run: |
          npm install
          
      - name: Setup Appium
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium --version
          appium driver install uiautomator2@2.45.1
          appium driver list --installed

      - name: Download Android App
        continue-on-error: true
        run: |
          if [ ! -z "${{ env.ANDROID_APP_URL }}" ]; then
            echo "üì± Downloading Android app..."
            curl -L -o apps/app.apk "${{ env.ANDROID_APP_URL }}" || echo "Download failed"
            
            if [ -f "apps/app.apk" ]; then
              FILE_SIZE=$(stat -c%s "apps/app.apk" 2>/dev/null || echo "0")
              if [ "$FILE_SIZE" -gt "1000" ]; then
                echo "‚úÖ APK downloaded: ${FILE_SIZE} bytes"
              else
                rm -f apps/app.apk
              fi
            fi
          fi

      - name: Create test runner script
        run: |
          cat > run-tests.sh << 'EOF'
          #!/bin/bash
          
          echo "========================================="
          echo "üì± Android Test Runner"
          echo "========================================="
          
          # Show current directory
          echo "üìÅ Working directory: $(pwd)"
          echo "üìÅ Test files:"
          find test -name "*.spec.js" -type f 2>/dev/null | head -10
          
          # Cleanup function
          cleanup() {
              if [ ! -z "$APPIUM_PID" ]; then
                  echo "Stopping Appium..."
                  kill -TERM $APPIUM_PID 2>/dev/null || true
              fi
          }
          trap cleanup EXIT
          
          # Kill any existing Appium
          pkill -f appium || true
          sleep 2
          
          # Start Appium
          echo "üöÄ Starting Appium..."
          appium --address 127.0.0.1 --port 4723 --relaxed-security > appium.log 2>&1 &
          APPIUM_PID=$!
          
          # Wait for Appium
          echo "‚è≥ Waiting for Appium..."
          for i in {1..30}; do
            if curl -s http://127.0.0.1:4723/status | grep -q "ready.*true"; then
              echo "‚úÖ Appium is ready!"
              break
            fi
            sleep 2
          done
          
          # Verify Appium
          if ! curl -s http://127.0.0.1:4723/status | grep -q "ready.*true"; then
            echo "‚ùå Appium failed to start"
            cat appium.log | tail -50
            exit 1
          fi
          
          # Check devices
          echo "üì± Connected devices:"
          adb devices
          
          # Run tests
          echo "üß™ Running tests..."
          echo "Command: npm run test:android"
          npm run test:android || TEST_EXIT=$?
          
          echo "Test exit code: ${TEST_EXIT:-0}"
          
          # Show some logs if failed
          if [ "${TEST_EXIT:-0}" -ne 0 ]; then
            echo "üìã Last Appium logs:"
            tail -30 appium.log || true
          fi
          
          exit ${TEST_EXIT:-0}
          EOF
          chmod +x run-tests.sh

      - name: Run Android Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          avd-name: test_emulator
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot-save
          disable-animations: true
          disable-spellchecker: true
          emulator-boot-timeout: 600
          script: |
            # Ensure emulator is ready
            adb wait-for-device
            adb devices
            
            # Run the tests
            ./run-tests.sh || EXIT_CODE=$?
            
            # Return success even if tests fail (to allow artifact upload)
            echo "Tests completed with code: ${EXIT_CODE:-0}"
            exit ${EXIT_CODE:-0}

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results-${{ github.run_number }}
          path: |
            allure-report/
            allure-results/
            screenshots/
            appium.log
          retention-days: 30
          if-no-files-found: warn

  test-ios:
    name: iOS Tests
    runs-on: macos-13
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Verify test structure
        run: |
          echo "üìÅ Current directory: $(pwd)"
          echo "üìÅ Repository structure:"
          ls -la
          
          echo "üìÅ Test files:"
          if [ -d "test/specs" ]; then
            echo "Found test/specs:"
            ls -la test/specs/
          elif [ -d "test/spec" ]; then
            echo "Found test/spec:"
            ls -la test/spec/
          fi
          
          mkdir -p apps

      - name: Create/Update configs
        run: |
          mkdir -p config
          
          # Create shared config
          cat > config/wdio.shared.conf.js << 'EOF'
          const path = require('path');
          
          exports.config = {
              runner: 'local',
              specs: [
                  path.join(process.cwd(), './test/specs/**/*.js'),
                  path.join(process.cwd(), './test/spec/**/*.js')
              ],
              exclude: [],
              maxInstances: 1,
              capabilities: [],
              logLevel: 'info',
              bail: 0,
              baseUrl: '',
              waitforTimeout: 10000,
              connectionRetryTimeout: 120000,
              connectionRetryCount: 3,
              services: [],
              framework: 'mocha',
              reporters: [
                  'spec',
                  ['allure', {
                      outputDir: 'allure-results',
                      disableWebdriverStepsReporting: true,
                      disableWebdriverScreenshotsReporting: false,
                  }]
              ],
              mochaOpts: {
                  ui: 'bdd',
                  timeout: 60000
              },
              afterTest: async function(test, context, { error, result, duration, passed, retries }) {
                  if (!passed) {
                      try {
                          await driver.takeScreenshot();
                      } catch (e) {
                          console.log('Failed to take screenshot:', e.message);
                      }
                  }
              }
          };
          EOF
          
          # Create iOS config
          cat > config/wdio.ios.conf.js << 'EOF'
          const { config } = require('./wdio.shared.conf');
          const path = require('path');
          const fs = require('fs');
          
          config.port = 4723;
          
          // Set specs with absolute paths
          config.specs = [
              path.join(process.cwd(), './test/specs/**/*.js'),
              path.join(process.cwd(), './test/spec/**/*.js')
          ];
          
          // Check for app
          let appPath = path.join(process.cwd(), './apps/NativeDemoApp.app');
          let capabilities = {};
          
          if (fs.existsSync(appPath)) {
              console.log('Using app:', appPath);
              capabilities = {
                  platformName: 'iOS',
                  'appium:automationName': 'XCUITest',
                  'appium:deviceName': 'iPhone 14',
                  'appium:platformVersion': '16.4',
                  'appium:app': appPath,
                  'appium:noReset': true,
                  'appium:newCommandTimeout': 240,
                  'appium:simulatorStartupTimeout': 120000,
              };
          } else {
              console.log('No app found, using Safari');
              capabilities = {
                  platformName: 'iOS',
                  'appium:automationName': 'XCUITest',
                  'appium:deviceName': 'iPhone 14',
                  'appium:platformVersion': '16.4',
                  'appium:bundleId': 'com.apple.mobilesafari',
                  'appium:noReset': true,
                  'appium:newCommandTimeout': 240,
                  'appium:simulatorStartupTimeout': 120000,
              };
          }
          
          config.capabilities = [capabilities];
          exports.config = config;
          EOF
          
          # Debug: Show config content
          echo "üìÑ Config content:"
          cat config/wdio.ios.conf.js

      - name: Install dependencies
        run: |
          npm install

      - name: Setup Appium
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium --version
          appium driver install xcuitest@4.35.0
          appium driver list --installed

      - name: Download iOS App
        continue-on-error: true
        run: |
          if [ ! -z "${{ env.IOS_APP_URL }}" ]; then
            echo "üì± Downloading iOS app..."
            curl -L -o apps/app.zip "${{ env.IOS_APP_URL }}" || echo "Download failed"
            
            if [ -f "apps/app.zip" ]; then
              FILE_SIZE=$(stat -f%z "apps/app.zip" 2>/dev/null || echo "0")
              if [ "$FILE_SIZE" -gt "1000" ]; then
                unzip -q -o apps/app.zip -d apps/ || echo "Extract failed"
                APP_PATH=$(find apps -name "*.app" -type d | head -1)
                if [ ! -z "$APP_PATH" ]; then
                  mv "$APP_PATH" "apps/NativeDemoApp.app" 2>/dev/null || true
                fi
              fi
            fi
          fi

      - name: Setup iOS Simulator
        run: |
          echo "üì± Setting up iOS Simulator..."
          
          # Get available runtimes
          echo "Available runtimes:"
          xcrun simctl list runtimes
          
          # Get the latest iOS runtime
          RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}')
          echo "Using runtime: $RUNTIME"
          
          # Delete existing simulator if exists
          xcrun simctl delete "iPhone 14" 2>/dev/null || true
          
          # Create new simulator
          DEVICE_ID=$(xcrun simctl create "iPhone 14" "iPhone 14" "$RUNTIME")
          echo "Created device: $DEVICE_ID"
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
          
          # Boot the simulator
          xcrun simctl boot "$DEVICE_ID"
          
          # Wait for boot
          echo "Waiting for simulator to boot..."
          xcrun simctl bootstatus "$DEVICE_ID" || true
          
          # List booted devices
          echo "Booted devices:"
          xcrun simctl list devices | grep Booted

      - name: Run iOS Tests
        run: |
          echo "üì± Starting iOS tests..."
          echo "üìÅ Working directory: $(pwd)"
          echo "üìÅ Test files found:"
          find test -name "*.spec.js" -type f 2>/dev/null | head -10
          
          # Start Appium
          echo "üöÄ Starting Appium server..."
          appium --address 127.0.0.1 --port 4723 --relaxed-security > appium.log 2>&1 &
          APPIUM_PID=$!
          
          # Wait for Appium to be ready
          echo "‚è≥ Waiting for Appium..."
          MAX_ATTEMPTS=30
          ATTEMPT=0
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            if curl -s http://127.0.0.1:4723/status | grep -q "ready.*true"; then
              echo "‚úÖ Appium is ready!"
              break
            fi
            ATTEMPT=$((ATTEMPT + 1))
            echo "   Waiting... attempt $ATTEMPT/$MAX_ATTEMPTS"
            sleep 2
          done
          
          # Verify Appium is running
          if ! curl -s http://127.0.0.1:4723/status | grep -q "ready.*true"; then
            echo "‚ùå Appium failed to start"
            cat appium.log | tail -50
            exit 1
          fi
          
          # Show Appium status
          echo "üìä Appium status:"
          curl -s http://127.0.0.1:4723/status | python3 -m json.tool || true
          
          # Debug WebdriverIO config
          echo "üîç Checking WebdriverIO configuration..."
          echo "Current directory: $(pwd)"
          echo "Test specs pattern:"
          node -e "console.log(require('./config/wdio.ios.conf').config.specs)"
          
          # Run tests
          echo "üß™ Running tests with command: npm run test:ios"
          npm run test:ios || TEST_EXIT=$?
          
          # Cleanup
          kill $APPIUM_PID 2>/dev/null || true
          
          # Show results
          if [ "${TEST_EXIT:-0}" -eq 0 ]; then
            echo "‚úÖ Tests passed!"
          else
            echo "‚ùå Tests failed with exit code: ${TEST_EXIT:-1}"
            echo "üìã Last Appium logs:"
            tail -30 appium.log || true
          fi
          
          exit ${TEST_EXIT:-0}

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-test-results-${{ github.run_number }}
          path: |
            allure-report/
            allure-results/
            screenshots/
            appium.log
          retention-days: 30
          if-no-files-found: warn