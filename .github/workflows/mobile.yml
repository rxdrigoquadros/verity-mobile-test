# .github/workflows/mobile-tests.yml
name: Mobile Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  APPIUM_VERSION: '2.11.3'

jobs:
  test-android:
    name: Android Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install
          
      - name: Setup Appium with compatible drivers
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium --version
          appium driver install uiautomator2@2.45.1
          appium driver list --installed

      - name: Download Android app
        run: |
          mkdir -p apps
          wget -q https://github.com/webdriverio/native-demo-app/releases/download/v1.0.8/Android-NativeDemoApp-0.4.0.apk -P apps/

      - name: Create test script
        run: |
          cat > run-tests.sh << 'SCRIPT_END'
          #!/bin/bash
          set -e
          
          echo "📱 Starting Appium server..."
          appium --allow-insecure chromedriver_autodownload --relaxed-security > appium.log 2>&1 &
          APPIUM_PID=$!
          
          echo "⏳ Waiting for Appium to start..."
          for i in {1..30}; do
            if curl -s http://127.0.0.1:4723/status 2>/dev/null | grep -q '"ready":true'; then
              echo "✅ Appium is ready!"
              break
            fi
            echo "   Attempt $i/30..."
            sleep 2
          done
          
          # Verify Appium is running
          if ! curl -s http://127.0.0.1:4723/status 2>/dev/null | grep -q '"ready":true'; then
            echo "❌ Appium failed to start"
            cat appium.log
            exit 1
          fi
          
          # Check emulator
          echo "📱 Checking emulator status..."
          adb devices
          
          echo "🧪 Running Android tests..."
          npm run test:android || TEST_EXIT_CODE=$?
          
          echo "🛑 Stopping Appium..."
          kill $APPIUM_PID 2>/dev/null || true
          
          exit ${TEST_EXIT_CODE:-0}
          SCRIPT_END
          
          chmod +x run-tests.sh

      - name: Setup and Run Android Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          avd-name: test_emulator
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          disable-spellchecker: true
          script: ./run-tests.sh

      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "allure-results" ]; then
            npx allure-commandline generate allure-results --clean -o allure-report
          else
            echo "No test results found"
            mkdir -p allure-report
            cat > allure-report/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>Android Test Report</title>
                <style>
                    body { font-family: Arial, sans-serif; padding: 40px; }
                    .status { color: #ff9800; }
                </style>
            </head>
            <body>
                <h1>📱 Android Test Report</h1>
                <p class="status">No test results were generated. Check the workflow logs.</p>
            </body>
            </html>
            EOF
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-android-${{ github.run_number }}
          path: |
            allure-report/
            screenshots/
            appium.log
          retention-days: 30
          if-no-files-found: warn

  test-ios:
    name: iOS Tests
    runs-on: macos-13
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Setup Appium with compatible drivers
        run: |
          npm install -g appium@${{ env.APPIUM_VERSION }}
          appium --version
          appium driver install xcuitest@4.35.0
          appium driver list --installed

      - name: Download iOS app
        run: |
          mkdir -p apps
          wget -q https://github.com/webdriverio/native-demo-app/releases/download/v1.0.8/iOS-Simulator-NativeDemoApp-0.4.0.app.zip -P apps/
          unzip -q -o apps/iOS-Simulator-NativeDemoApp-0.4.0.app.zip -d apps/

      - name: Setup iOS Simulator
        run: |
          # List available runtimes
          echo "📱 Available iOS runtimes:"
          xcrun simctl list runtimes
          
          # Create iPhone 14 simulator
          RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}')
          echo "Using runtime: $RUNTIME"
          
          # Delete existing if exists
          xcrun simctl delete "iPhone 14 Test" 2>/dev/null || true
          
          # Create new simulator
          DEVICE_ID=$(xcrun simctl create "iPhone 14 Test" "iPhone 14" "$RUNTIME")
          echo "Created device: $DEVICE_ID"
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
          
          # Boot simulator
          xcrun simctl boot "$DEVICE_ID"
          
          # Wait for boot
          xcrun simctl bootstatus "$DEVICE_ID"

      - name: Run iOS Tests
        run: |
          # Start Appium
          echo "📱 Starting Appium server..."
          appium --allow-insecure chromedriver_autodownload --relaxed-security > appium.log 2>&1 &
          APPIUM_PID=$!
          
          # Wait for Appium
          echo "⏳ Waiting for Appium to start..."
          for i in {1..30}; do
            if curl -s http://127.0.0.1:4723/status 2>/dev/null | grep -q '"ready":true'; then
              echo "✅ Appium is ready!"
              break
            fi
            echo "   Attempt $i/30..."
            sleep 2
          done
          
          # Verify Appium
          if ! curl -s http://127.0.0.1:4723/status 2>/dev/null | grep -q '"ready":true'; then
            echo "❌ Appium failed to start"
            cat appium.log
            exit 1
          fi
          
          # Run tests
          echo "🧪 Running iOS tests..."
          npm run test:ios || TEST_EXIT_CODE=$?
          
          # Stop Appium
          kill $APPIUM_PID 2>/dev/null || true
          
          exit ${TEST_EXIT_CODE:-0}

      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "allure-results" ]; then
            npx allure-commandline generate allure-results --clean -o allure-report
          else
            echo "No test results found"
            mkdir -p allure-report
            cat > allure-report/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>iOS Test Report</title>
                <style>
                    body { font-family: Arial, sans-serif; padding: 40px; }
                    .status { color: #ff9800; }
                </style>
            </head>
            <body>
                <h1>📱 iOS Test Report</h1>
                <p class="status">No test results were generated. Check the workflow logs.</p>
            </body>
            </html>
            EOF
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ios-${{ github.run_number }}
          path: |
            allure-report/
            screenshots/
            appium.log
          retention-days: 30
          if-no-files-found: warn

  deploy-report:
    name: Deploy Report to GitHub Pages
    needs: [test-android, test-ios]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: test-results-android-${{ github.run_number }}
          path: android-results/

      - name: Download iOS results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: test-results-ios-${{ github.run_number }}
          path: ios-results/

      - name: Prepare deployment
        run: |
          mkdir -p public
          
          # Check and copy Android report
          if [ -d "android-results/allure-report" ] && [ -f "android-results/allure-report/index.html" ]; then
            echo "✅ Found Android report"
            cp -r android-results/allure-report/* public/
          fi
          
          # Check and copy iOS report
          if [ -d "ios-results/allure-report" ] && [ -f "ios-results/allure-report/index.html" ]; then
            echo "✅ Found iOS report"
            cp -r ios-results/allure-report/* public/
          fi
          
          # Create summary page if no reports
          if [ ! -f "public/index.html" ]; then
            echo "⚠️ No test reports found, creating summary page"
            cat > public/index.html << 'EOF'
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Mobile Test Reports</title>
                <style>
                    * { margin: 0; padding: 0; box-sizing: border-box; }
                    body { 
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        min-height: 100vh;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        padding: 20px;
                    }
                    .container {
                        max-width: 600px;
                        width: 100%;
                        background: white;
                        border-radius: 20px;
                        padding: 40px;
                        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                        text-align: center;
                    }
                    h1 { 
                        color: #333;
                        margin-bottom: 20px;
                    }
                    .status {
                        padding: 20px;
                        background: #f8f9fa;
                        border-radius: 10px;
                        margin: 20px 0;
                    }
                    .timestamp {
                        color: #6c757d;
                        font-size: 14px;
                        margin-top: 20px;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>📱 Mobile Test Reports</h1>
                    <div class="status">
                        <h3>⏳ Processing...</h3>
                        <p>Test reports will be available after execution completes.</p>
                    </div>
                    <p class="timestamp">
                        Run #${{ github.run_number }} • Branch: ${{ github.ref_name }}
                    </p>
                </div>
            </body>
            </html>
            EOF
          fi
          
          # List contents
          echo "📁 Public directory contents:"
          ls -la public/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4